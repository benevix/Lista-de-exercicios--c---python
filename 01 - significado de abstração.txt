AbstraÃ§Ã£o, em OrientaÃ§Ã£o a Objetos, Ã© o princÃ­pio de simplificar a complexidade do mundo real, representando apenas os aspectos essenciais de um objeto ou sistema â€” ou seja, o que ele faz, e nÃ£o como ele faz.

Na prÃ¡tica, a abstraÃ§Ã£o permite criar modelos genÃ©ricos que escondem detalhes de implementaÃ§Ã£o, facilitando o entendimento, manutenÃ§Ã£o e expansÃ£o do sistema.

ğŸ’¡ Exemplo prÃ¡tico: Sistema de controle ou automaÃ§Ã£o

Imagine um sistema de automaÃ§Ã£o industrial que precisa controlar diferentes atuadores â€” por exemplo, um ventilador (cooler) e um aquecedor (heater).

Podemos criar uma classe abstrata chamada Atuador, que define o comportamento comum a todos os tipos de atuadores:

from abc import ABC, abstractmethod

class Atuador(ABC):
    @abstractmethod
    def ligar(self):
        pass

    @abstractmethod
    def desligar(self):
        pass


Essa classe nÃ£o sabe como cada atuador Ã© ligado ou desligado â€” ela apenas define a interface que todos devem seguir.

Depois, podemos criar implementaÃ§Ãµes especÃ­ficas:

class Ventilador(Atuador):
    def ligar(self):
        print("Ventilador ligado para resfriar o sistema.")

    def desligar(self):
        print("Ventilador desligado.")

class Aquecedor(Atuador):
    def ligar(self):
        print("Aquecedor ligado para aquecer o sistema.")

    def desligar(self):
        print("Aquecedor desligado.")

âœ… Vantagem da abstraÃ§Ã£o

Com isso, o controle de temperatura pode acionar os atuadores sem se preocupar com o tipo exato de dispositivo:

def controlar(atuador: Atuador, temperatura, limite):
    if temperatura > limite:
        atuador.ligar()
    else:
        atuador.desligar()


Nesse exemplo:

A classe abstrata Atuador representa o conceito genÃ©rico (abstraÃ§Ã£o).

As classes Ventilador e Aquecedor sÃ£o implementaÃ§Ãµes concretas.

O controle pode funcionar com qualquer atuador, sem precisar conhecer os detalhes internos de cada um.

ğŸ‘‰ Resumindo:
A abstraÃ§Ã£o em POO serve para destacar o essencial e ocultar o desnecessÃ¡rio, permitindo criar sistemas modulares, genÃ©ricos e fÃ¡ceis de estender â€” algo fundamental em projetos de automaÃ§Ã£o e controle industrial.